return {
  {
    "nvim-telescope/telescope.nvim",
    version = "*",
    dependencies = {
      "nvim-lua/plenary.nvim",
      "BurntSushi/ripgrep",
      "nvim-telescope/telescope-live-grep-args.nvim",
    },
    keys = {
      {
        "<leader>?",
        function() require("telescope.builtin").oldfiles() end,
        { desc = "[?] Find recently opened files" },
      },
      {
        "<leader><space>",
        function() require("telescope.builtin").buffers() end,
        { desc = "[ ] Find existing buffers" },
      },
      {
        "<leader>gf",
        function() require("telescope.builtin").git_files() end,
        { desc = "Search [G]it [F]iles" },
      },
      { "<leader>sf", function() require("telescope.builtin").find_files() end, { desc = "[S]earch [F]iles" } },
      { "<leader>sh", function() require("telescope.builtin").help_tags() end, { desc = "[S]earch [H]elp" } },
      {
        "<leader>sw",
        function() require("telescope.builtin").grep_string() end,
        { desc = "[S]earch current [W]ord" },
      },
      {
        "<leader>sg",
        ":lua require('telescope').extensions.live_grep_args.live_grep_args()<CR>",
        { desc = "[S]earch by [G]rep" },
      },
      { "<leader>sd", function() require("telescope.builtin").diagnostics() end, { desc = "[S]earch [D]iagnostics" } },
      { "<leader>km", function() require("telescope.builtin").keymaps() end, { desc = "[S]earch [K]eymaps" } },
      {
        "<leader>/",
        function()
          require("telescope.builtin").current_buffer_fuzzy_find(require("telescope.themes").get_dropdown {
            winblend = 10,
            previewer = false,
          })
        end,
        { desc = "[/] Fuzzily search in current buffer" },
      },
    },
    config = function()
      local lga_actions = require "telescope-live-grep-args.actions"
      require("telescope").setup {
        extensions = {
          live_grep_args = {
            auto_quoting = true,
            mappings = {
              i = {
                ["<C-k>"] = lga_actions.quote_prompt(),
                ["<C-i>"] = lga_actions.quote_prompt { postfix = " --iglob " },
              },
            },
          },
        },
        defaults = {
          mappings = {
            i = {
              ["<C-u>"] = false,
              ["<C-d>"] = false,
            },
          },
        },
        pickers = {
          find_files = {
            hidden = true,
          },
        },
      }
      -- Enable telescope fzf native, if installed
      pcall(require("telescope").load_extension, "fzf")
    end,
  },
  {
    'nvim-telescope/telescope-fzf-native.nvim',
    {{- if eq .chezmoi.os "windows" }}
    build = 
    'cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build',
    cond = function()
      return vim.fn.executable 'cmake' == 1
    end,
    {{- else }}
    build = 'make',
    cond = function()
      return vim.fn.executable 'make' == 1
    end,
    {{- end }}
  },
}
